正则表达式：参考--https://www.runoob.com/regexp/regexp-rule.html
	普通字符：普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。
		[...]: 匹配 [...] 中的所有字符，例如 [aeiou] 匹配字符串 "google runoob taobao" 中所有的 e o u a 字母。
		[^...] 匹配除了 [...] 中字符的所有字符，例如 [^aeiou] 匹配字符串 "google runoob taobao" 中除了 e o u a 字母的所有字母。
		[A-Z]：[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。
		.: 匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。
		[\s\S]: 匹配所有。
		\s：是匹配所有空白符，包括换行。
		\S：非空白符，包括换行。
		\w: 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。
		\W：匹配非字母、数字、下划线。等价于 '[^A-Za-z0-9_]'。
		\d：匹配一个数字字符。等价于 [0-9]。
		\D：匹配一个非数字字符。等价于 [^0-9]。
		
	
	非打印字符: 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：
		\cx：匹配由x指明的控制字符。例如\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
		\f：匹配一个换页符。等价于 \x0c 和 \cL。
		\n：匹配一个换行符。等价于 \x0a 和 \cJ。
		\r：匹配一个回车符。等价于 \x0d 和 \cM。
		\s：匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
		\S：匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
		\t：匹配一个制表符。等价于 \x09 和 \cI。
		\v：匹配一个垂直制表符。等价于 \x0b 和 \cK。
		
	特殊字符：所谓特殊字符，就是一些有特殊含义的字符，简单的说就是表示任何字符串的意思。若要匹配特殊字符，必须首先使字符"转义"，即将反斜杠字符\ 放在它们前面。
		$：匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。
	    (pattern)：匹配 pattern 并获取这一匹配。标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。
		(?:pattern)：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。
		(?=pattern)：正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。
		(?!pattern)：正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。
		(?<=pattern)：反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。
		(?<!pattern)：反向否定预查，与正向否定预查类似，只是方向相反。
		*：匹配前面的子表达式零次或多次。
		+：匹配前面的子表达式一次或多次。
		.：匹配除换行符 \n 之外的任何单字符。
		[：标记一个中括号表达式的开始。
		?：匹配前面的子表达式零次或一次，或指明一个非贪婪限定符/最小匹配。
		\：将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。
		^：匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。
		{：标记限定符表达式的开始。
		|：指明两项之间的一个选择。
		
	限定符：限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。
		*：匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
		+：匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
		?：匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
		{n}：n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
		{n,}：n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
		{n,m}：m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
		注：* 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。
			如：<h1>RUNOOB-菜鸟教程</h1>，/<.*>/ 会匹配整个字符串<h1>RUNOOB-菜鸟教程</h1>，/<.*?>/则只匹配<h1>。
			
	定界符：定位符使您能够将正则表达式固定到行首或行尾。用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。
		^：匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。
		$：匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。
		\b：匹配一个单词边界，即字与空格间的位置。
		\B：非单词边界匹配。
			\b 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。
			例如，表达式/ter\b/匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：
				  表达式/\Bapt/匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：
		注：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。
		
	修饰符：标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。标记不写在正则表达式里，标记位于表达式之外。如/pattern/flags
		i：ignore - 不区分大小写，将匹配设置为不区分大小写。
		g：global - 全局匹配，查找所有的匹配项。
		m：multi line - 多行匹配，使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。
		s：特殊字符圆点 . 中包含换行符 \n，默认情况下的圆点 . 是 匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n。
		
		如：/pattern/gi
		
	例子：^[a-zA-Z0-9_]+$         // 所有包含一个以上的字母、数字或下划线的字符串 
		  ^[1-9][0-9]*$           // 所有的正整数  
		  ^\-?[0-9]+$             // 所有的整数 
		  ^[-]?[0-9]+(\.[0-9]+)?$ // 所有的浮点数	
		  [^\"\']                 //除了双引号(")和单引号(')之外的所有字符
		  [0-9\.\-]               //匹配所有的数字，句号和减号
          ^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)+$	//匹配邮箱  ^[\w]+@[\w]+(\.[\w]+)+$
		  
		  $mode = '/\[url\S*\[\/url\S*\]/';
		  preg_grep($mode,$str) //匹配查找，返回一个数组；
		  preg_match($mode,$str,$return) //在字符串中查找匹配项，返回一个数组。
		  preg_replace($mode,$replacement,$str [,int limit 匹配多少次]) //查找和替换子字符串（类似str_replace）
		 
 

		  
		  
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		