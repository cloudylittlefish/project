#note

//屏蔽错误信息
error_reporting(E_ALL^E_WARNING^E_NOTICE);

会话：一组请求和响应的集合。
url分为资源路径和资源名称（最后斜杠的文件名）
同类请求 == 资源路径相同的请求

/^\w*@\w*(\.\w*){0,3}$/ 

/^\d{4}(\W)\d{2}\\1\d{2}$/

/<script[^>].*?>.*?</script>/is

post方法传值要用file_get_contents('php://input'); post不能在url直接添加参数传值，get可以


1.$_SERVER['SERVER_NAME']：记录了网站的域名。

2.$_SERVER['DOCUMENT_ROOT']：网站的根目录（就是在你系统下的绝对路径，在windows都是例如是C://wamp/www之类的，linux例如是/var/www/html）。

3.$_SERVER['SERVER_ADDR']：记录网站的IP地址

4.$_SERVER['REMOTE_ADDR']：记录访问者的IP地址

5.$_SERVER['SCRIPT_FILENAME']：访问的文件的路径

6.$_SERVER['REQUEST_SCHEME']：访问的文件的方式，常见为http

yii2 类库文件目录\vendor\yiisoft\yii2\widgets\


基础函数
ucfirst 字符串首字母大写
ucwords 字符串每个单词大写s
strrev 字符串倒写
strlen 返回字符串长度

array_chunk 将一个数组分割
array_merge 数组合并
array_keys 返回数组所有索引
array_search 返回数组值所在的索引
array_push 在数组后面插入一个或多个数组
array_rand 返回数组随机一个值
array_unique 去除数组重复值
array_replace 取代数组第一个值
array_values 数组索引重新排序      /// sort

session工作原理：（PHP为PHPSESSID=>session_name() ）
1.当用户发出第一次请求调用getSession(),服务器会生成一个随机的32位字符串和创建一个session对象作为session列表的key和value
（key为32位随机字符串称为sessionID，value为session对象的引用的Map），并把包装成name为sessionID、value为32位的随机字符串的
  cookies返回给客户端的浏览器的缓存中。
2.浏览器接收到cookie后保存到浏览器的缓存，当客户端再次发送请求的时候，首先会把浏览器缓存的cookie的sessionID放在请求的头部信息
中发送给服务器，然后服务器接收到信息后会拿cookie的值即32位的字符串，从session列表中的key中一步步找，找到了key匹配的value即从预
属性session中读数据了。

注意：php如果使用基于Cookies的Session，在使用该函数开始session之前，不能有任何输出的内容。调用session_start()函数会生成一个唯一的
Session ID，保存在客户端电脑的Cookies中。和setCookies()函数一样，调用之前不能有任何的输出，空格或空行也不行。

{
禁用Cookies的情况下传递Session ID：
<?php 
	session_start();
	echo '<a href="test.php?'.session_name().'='.session_id().'">链接演示</a>';
?>

}
cookie和session:{
1.session和cookie都可以记录数据状态.
2.在设置session和cookie之前不能有输出.
3.cookie是客户端技术，session是服务器端技术.
4.在用户阻断cookie技术，可以通过URL传递Session ID（在不禁用cookie的情况下，cookie效果更好）。
	如:<a href="index.php?<?php echo SID ?>" >(手动传递sessionID形式)
	(如果客户端没有适当的cookie，则SID的格式为session_name=session_id,有的话SID为空字符串，
		默认开启有cookie的设置为 setcookie(session_name(),session_id(),0,'/'))

删除session(四步)：
1.开启seesion，session_start();
2.$_SESSION['xxx'] = '' 或 $_SESSION = array();
3.(假设cookie开启情况下)
	if( isset($_COOKIE[sesion_name()]) ){
		setcookie(session_name(),'',time()-3600,'/');
	}
4.session_destroy();
}

{
//CTRL调用之获取AccessToken
        function getAccessToken()
        {
                $url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wxc216da42d54ce125&secret=9d61f69e03c97f6272260f121f837707";

                // 微信返回的信息
                $returnData = json_decode(curlHttp($url));

                $resData['accessToken'] = $returnData->access_token;

                $resData['expiresIn'] = $returnData->expires_in;

                $resData['time'] = date("Y-m-d H:i",time());

                $res = $resData;
                return $res;
        }

        function curlHttp($url) {
            $curl = curl_init();

            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true );

            curl_setopt($curl, CURLOPT_TIMEOUT, 500 );

            curl_setopt($curl, CURLOPT_URL, $url );

            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER,false);

            $res = curl_exec($curl);

            curl_close($curl);

            return $res;
        }

}

 上传图片{
   
    public function doPageUploadimg(){
        $file_name = $_FILES['imageUrl']['name'];         //获取缓存区图片,格式不能变
        $type = array("jpg", "gif", 'png', 'bmp');        //允许选择的图片类型
        $ext = explode(".", $file_name);         //拆分获取图片名
        $ext2 = $ext[count($ext) - 1];                    //取图片的后缀名
        //$_SERVER['DOCUMENT_ROOT'];                      //网站根目录
        $img_path = $_SERVER['DOCUMENT_ROOT'] . '/addons/ymktv_sun/static/uploadimg/';   //图片路径
        if (in_array($ext2, $type)) {
            $str = '123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            //防止文件名重复 生成随机字符串
            $name = substr(str_shuffle($str),mt_rand(0,strlen($str)-11),10);
            $filename = time().$name.'.'.$ext2;
            //检查文件或目录是否存在
            if(file_exists($filename)) {
                echo"该文件已存在";
            }else{
                //保存文件,   move_uploaded_file 将上传的文件移动到新位置
                $res = move_uploaded_file($_FILES["imageUrl"]["tmp_name"],$img_path.$filename);//将临时地址移动到指定地址
                if ($res) {
                    echo json_encode($filename);
                }else{
                    echo '上传失败！';
                }
            }
        }
    }
}


微信单文件支付{
	function createNoncestr($length = 32)
    {
        $chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        $str = "";
        for ($i = 0; $i < $length; $i++) {
            $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);
        }
        return $str;
    }
	
		public function doPagewechatpay(){ 
		global $_W, $_GPC;
//		$openid = $_GPC['openid'];
		$appData = pdo_get("ymktv_sun_system", array("uniacid" => $_W['uniacid']));
		$appid = $appData['appid'];
		//商户号
		$mch_id = $appData['mchid'];
		//商户秘钥
		$keys = $appData["wxkey"];  
		$price = '0.01';  //价格 
		$order_url = "https://api.mch.weixin.qq.com/pay/unifiedorder";
		$notify_url = 'https://tt1.biu.ltd/wx_jsapi/notify.php';
		$data = array("appid" => $appid, "mch_id" => $mch_id, "nonce_str" => $this->createNoncestr(), "body" => time(), "out_trade_no" => date("Ymd") . substr('' . time(), -4, 4), "total_fee" => $price * 100, "spbill_create_ip" => $_SERVER['REMOTE_ADDR'], "notify_url" => $notify_url, "trade_type" => "NATIVE","product_id" => '122354132140703');
		ksort($data, SORT_ASC);
		//urldecode还原转义
		$stringA = urldecode(http_build_query($data)); 
 //		var_dump($signTempStr);
		$signTempStr = $stringA . "&key=" . $keys;
		$signValue = strtoupper(md5($signTempStr)); 
		$data["sign"] = $signValue;


		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $order_url);
		curl_setopt($ch, CURLOPT_HEADER, 0);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $this->array_to_xml($data));
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		$result = curl_exec($ch);
		curl_close($ch);
		$result = xml2array($result);

        require_once TD_PATH . '/phpqrcode/phpqrcode.php';
        $value = $result['code_url'];
        $errorCorrectionLevel = 'L';  //容错级别
        $matrixPointSize = 5;      //生成图片大小
        //生成二维码图片
        $filename = TD_PATH . '/phpqrcode/imgs/' . time() . '.png';
        QRcode::png($value, $filename, $errorCorrectionLevel, $matrixPointSize, 2);
        $QR = $filename;        //已经生成的原始二维码图片文件
        //从字符串中的图像流新建一图像
        $QR = imagecreatefromstring(file_get_contents($QR));
//        //输出图片  第二个参数为图片名字
        $img = time() . '.png';
        imagepng($QR, $img);
        imagedestroy($QR);
        echo "<img src='{$img}' style='width:300px;'>";
        //删除图片
        unlink($filename);
		//$imageString ='data:image/png;base64,'.base64_encode(ob_get_contents());
		//ob_end_clean();
		
		//header("content-type:application/json; charset=utf-8");
		//return $imageString;
	}
	
		public function array_to_xml( $params ){
        if(!is_array($params)|| count($params) <= 0)
        {
            return false;
        }
        $xml = "<xml>";
        foreach ($params as $key=>$val)
        {
            if (is_numeric($val)){
                $xml.="<".$key.">".$val."</".$key.">";
            }else{
                $xml.="<".$key."><![CDATA[".$val."]]></".$key.">";
            }
        }
        $xml.="</xml>";
        return $xml;
    }
	
	//https://tt1.biu.ltd/wx_jsapi/notify.php下的文件，因为这个是中转站文件，还有get跳转操作
	<?php
        //接受微信回调的参数
        $xmlData = file_get_contents('php://input');
        libxml_disable_entity_loader(true);
        $data = json_decode(json_encode(simplexml_load_string($xmlData, 'SimpleXMLElement', LIBXML_NOCDATA)), true);
        if (is_array($data))
        {
            $data = http_build_query($data, null, '&');
        }
        //阻止微信接口反复回调接口
        echo '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';
        $order_url = 'https://tt1.biu.ltd/app/index.php?i=4&t=0&v=1.6.7&from=wxapp&c=entry&a=wxapp&do=WxConsumeRecord&m=ymktv_sun&sign=a8f666aadd35673d1273770dab849cba&'.$data;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $order_url);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $result = curl_exec($ch);
        curl_close($ch);
	?>
	
	
}
{
	class WxPayConfig extends WxPayConfigInterface
{
	//=======【基本信息设置】=====================================
	/**
	 * TODO: 修改这里配置为您自己申请的商户信息
	 * 微信公众号信息配置
	 * 
	 * APPID：绑定支付的APPID（必须配置，开户邮件中可查看）
	 * 
	 * MCHID：商户号（必须配置，开户邮件中可查看）
	 * 
	 */
	public function GetAppId()
	{
		return 'wx672d430754a3aa70';
	}
	public function GetMerchantId()
	{
		return '1247735401';
	}
	
	//=======【支付相关配置：支付成功回调地址/签名方式】===================================
	/**
	* TODO:支付回调url
	* 签名和验证签名方式， 支持md5和sha256方式
	**/
	public function GetNotifyUrl()
	{
		return "";
	}
	public function GetSignType()
	{
		return "HMAC-SHA256";
	}

	//=======【curl代理设置】===================================
	/**
	 * TODO：这里设置代理机器，只有需要代理的时候才设置，不需要代理，请设置为0.0.0.0和0
	 * 本例程通过curl使用HTTP POST方法，此处可修改代理服务器，
	 * 默认CURL_PROXY_HOST=0.0.0.0和CURL_PROXY_PORT=0，此时不开启代理（如有需要才设置）
	 * @var unknown_type
	 */
	public function GetProxy(&$proxyHost, &$proxyPort)
	{
		$proxyHost = "0.0.0.0";
		$proxyPort = 0;
	}
	

	//=======【上报信息配置】===================================
	/**
	 * TODO：接口调用上报等级，默认紧错误上报（注意：上报超时间为【1s】，上报无论成败【永不抛出异常】，
	 * 不会影响接口调用流程），开启上报之后，方便微信监控请求调用的质量，建议至少
	 * 开启错误上报。
	 * 上报等级，0.关闭上报; 1.仅错误出错上报; 2.全量上报
	 * @var int
	 */
	public function GetReportLevenl()
	{
		return 1;
	}


	//=======【商户密钥信息-需要业务方继承】===================================
	/*
	 * KEY：商户支付密钥，参考开户邮件设置（必须配置，登录商户平台自行设置）, 请妥善保管， 避免密钥泄露
	 * 设置地址：https://pay.weixin.qq.com/index.php/account/api_cert
	 * 
	 * APPSECRET：公众帐号secert（仅JSAPI支付的时候需要配置， 登录公众平台，进入开发者中心可设置）， 请妥善保管， 避免密钥泄露
	 * 获取地址：https://mp.weixin.qq.com/advanced/advanced?action=dev&t=advanced/dev&token=2005451881&lang=zh_CN
	 * @var string
	 */
	public function GetKey()
	{
		return 'Ilove123biuIlove123biuIlove123bi';
	}
	public function GetAppSecret()
	{
		return 'f1e4ba60256da2c2ef5e6c23d7d2ba3c';
	}

}

php传值到Js Js ajax传值到php后台 后台获取值处理:
{
	一.php获取前台传来的值
	<?php
		$openid = $_GPC(_POST)["openid"];
		$money = $_GPC(_POST)['money'];
	?>
	二.php赋值给js，然后js ajax传给php后台
	<script type="text/javascript">
		var money = "<?php echo $money?>";    //php变量赋值给js变量，数组赋值暂时不知怎么处理
		var openid = "<?php echo $openid?>";
		
		$.ajax({
			type:"POST",
			url:"https://tt1.biu.ltd/app/index.php?i=4&t=0&v=1.6.7&from=wxapp&c=entry&a=wxapp&do=wxconsumerecord&m=ymktv_sun&sign=a8f666aadd35673d1273770dab849cba&",
			data:{
				money:money,
				openid:openid,
				pay_way:0
			},
			success:function(data){
				// alert(data);  //【四.如果还有其他处理，操作回调回来的data值。。。】
			},
			error:function () {
				alert('支付出错！');
			}
		})
	</script>
	三.php后台接收 然后处理。。
	<?php
		$data = [];
        $data['money'] = $_POST['money'];
        $data['openid'] = $_POST['openid'];
		print_r(data);
		...
	?>	
}


namespace命名空间作用范围；类，接口，函数，常量；
use别名导入，不使用的话则要写完整路径名。不用as为隐式命名，即为最后一个最后一个的名字，如use \aaa\bbb,名字为bbb。
自动加载：spl_autoload_register();
<?
function loadprint( $class ) {
 $file = $class . '.class.php';
 if (is_file($file)) {
 require_once($file);
 }
}
//PHP碰到没有定义的类就执行loadprint()
spl_autoload_register( 'loadprint' );
$obj = new PRINTIT();
$obj->doPrint();
?>

<?
//spl_autoload_register() 调用静态方法
class test {
 public static function loadprint( $class ) {
 $file = $class . '.class.php';
 if (is_file($file)) {
  require_once($file);
 }
 }
}
spl_autoload_register( array('test','loadprint') );
//另一种写法：spl_autoload_register( "test::loadprint" );
$obj = new PRINTIT();
$obj->doPrint();
?>



										  (默认)						
										  [输入值/输出值/输入输出值]					
存储过程:create procedure procedure_name([in/out/inout] 参数名 参数类型,...)
delimiter $
create procedure pro_test()
begin
	declare num int default 5;
	set num = num+10;
	select concat('num的值为:',num);
end$
delimiter ;
调用存储过程：call pro_test([输入的值，接收的变量(@value)]);
查询存储过程返回的变量值：select @value;


函数：create function function_name([参数 类型, ...])
		returns 类型
		begin
			...
		end;
		
delimiter $
create function city(id int)
returns int
begin 
	declare num int;
	select count(*) into num from table where city_id = id;
	return num;
end$
delimiter ;	
调用函数：select 函数名（...）;

删除：drop procedure/function 名字;			

存储过程和函数的区别在于函数必须有返回值，而存储过程不用。
函数：是一个有返回值的过程；
过程：是一个没有返回值的函数；


数据库设计三范式：第一（单一属性）、第二（中间表）、第三范式（间接依赖）。

索引笔记：
1.索引最左前缀法则，复合索引，就像上楼梯，如必须一层一层上去（从左边开始），不能跳过，跳过只取前面索引。
	where后面与写的顺序无关，与有没有包含有关。
2.范围判断时如 被between >= ，从该语句的右边的索引失效。
3.进行数值运行时如substing 赋值运算（包括原本字段为varchar字段类型，但进行赋值时没加引号''），索引失效.
4.or条件连接时，其中一个条件没有索引则整个语句索引失效。而且or不走复合索引，必须单列索引。
5.模糊查询%时，%加在后面如string%索引生效；%加在前面如%string则索引失效，要想%加在前面如%string则索引失效，要想%加在前面索引
	也生效则需要覆盖索引来解决（指定已有的索引字段）。
6.如果mysql评估使用索引比全表扫描更慢，则不使用索引，这是底层的优化。（大多数相同，极少数不同，全表扫描）
7.is null, is not null有时索引失效（根据数据库数据量决定，根据mysql评估使用哪个更快）。
8.in 走索引，not in索引失效。
9.尽量使用复合索引，而少使用单列索引。因为多个字段同时搜索单列索引只会使用最优（辨识度最高的索引）的一个，而不会
	像复合索引那样全部走索引。
10.查看索引使用情况：show [global] status like 'Handler_read%';


大量数据插入(导入)优化：
1.主键顺序插入，排好序，Inodb是二叉树结构。
2.关闭唯一性校验，set unique_checks=0;
3.手动提交事务，关闭自动提交事务，set autocommit=0;
 
insert插入优化：
1.多条语句插入改为一条语句插入。
2.手动提交事务插入。 
3.数据有序插入 .

order by 排序优化（using index）:
1.覆盖索引排序（避免使用*）。 
2.多字段排序，统一排序方式，要么升序 要么降序。
3.多字段排序要与索引字段顺序保持一致。
4.filesort优化，适当提高max_length_for_sort_data和sort_buffer_size系统变量排序区的大小。


group by 优化：
1.group by 也是排序操作，只是多了排序之后的分组操作。如果还多了一些聚合函数，还需要一些聚合函数的计算。
	所以优化可以在 group by + order by null 只是分组而不排序。
2. 创建索引，搜索有索引的字段 如select 索引字段 group by 索引字段 order by null;



or 优化(尽可能使用并集union)：
1.select * from table where id=1 or id=10;
	select * from table where id=1 union select * from table where id=10;


limit 优化
1. select * from table1 limit 2000000,10; 
优化为 select * from table1 t1, (select id from table1 order by id limit 2000000,10) t11 
	where t1.id = t11.id; 间接通过索引来查
	
2. select * from table1 limit 2000000,10; 
优化为 select * from table where id>2000000 limit 10;
	该适合于主键自增的表，且有断层的话数据不准确.
	 

使用sql提示
1. select * from table 【use/ignore/force index(index1)】 where ... 提示mysql使用/忽视/强制使用 index1这个索引.


查询缓存
是否支持 show variables like 'hava_query_cache';
是否开启 show variables like 'query_cache_type';
缓存占用大小  show variables like 'query_cache_size';
查看缓存族（状态变量） show status like 'Qcache%';
开启查询缓存 只需在/usr/my.cnf配置中 query_cache_type=1

查询缓存失效情况：
1.语句不完全一致，如查询语句大小写。
2.包含不确定的函数时，如now(),rand(),current_date(). 
3.不使用任何表查询语句，如select 'A';(A代表变量或常量)。
4.查询系统数据库时，如mysql。
5.存储过程，函数，触发器主体内执行的查询。
6.表更改时，如表映射，增删改查。


（MyISAM）锁：
写锁（共享锁）：一个用户对一个表启用的写锁，本身无法再访问别的表，也无法进行其他操作，直到解锁。别的用户（线程）
	能访问锁的表，也能访问别的表，但无法对锁的表进行其他操作（会阻塞），直到解锁。
读锁（排他锁）：当前用户（线程）可以进行读写操作，别的用户（线程）不能进行读写操作（会阻塞）。
简而言之，读锁会阻塞写，但不会阻塞读。写锁，既会阻塞读，也会阻塞写。


查看锁的的情况：
 1.show open tables;(in use)
 2.show status like 'Table_locks%';

 
(InnoDB)锁：支持行锁，和事务配合使用，要setautocommit=0;
1.无索引行锁升级为表锁，如果不通过索引条件（包括索引失效情况），行锁会升级为表锁。
2.间隙锁危害。使用范围条件时，并请求共享或排他锁时诱发。如ID>10,但只有123579，中间少了几个。


 innodb行锁争用情况：
 show status like 'innodb_row_lock%';


优化建议：
1.尽可能让所有 数据都能通过索引来完成，避免无索引行锁升级为表锁。
2.合理设计索引，尽量缩小锁的范围。
3.尽可能减少索引条件及索引范围，避免间隙锁。
4.尽量控制事务大小（线程次数），减少锁定资源量和时间长度。
5.尽可能使用低级别事务隔离（但是需要业务层面满足需求）。



Mysql日志：
查看日志：show variables like 'log_error%';


bin日志默认关闭 要配置
vi /usr/my.cnf
log_bin=mysqlbin
binlog_format=statement


非递归调用方法实现无限分类表结构
create table class(
	id int(11) not null auto_increment,
	catPath varchar(100) not null comment '分级路径',
	title varchar(100) default '' comment '栏目标题'
)
形式：
id		catPath			title
1		0				网站首页
2		0-1				Linux OS
3		0-1				Apache服务
4 		0-1-2			...

查询方式
select id,concat(catPath,'-',id) as absPath, title from tablename order by absPath,id;


主从复制：
从上层来看，复制分成三步（前提开启二进制日志）：
1.Master主库在事务提交时，会把数据变更作为时间Events记录在二进制日志文件Binlog中。
2.主库推送二进制文件Binlog中的日志事件到从库的中继日志Relay Log。
3.slave重做中继日志中的事件，将改变反映它自己的数据。

复制优势：
1.主库出现问题，可以快速切换到从库提供服务。
2.可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。
3.可以在从库中执行备份，以避免备份期间影响主库的服务。


ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAkci0Zgcy0/8dXsGVk8eda6tZc49lDZa6IoEKDC8hhVhRl+8VL+TMakPb6ZmhZhuVUtgRm2QWLBBN5fJDac0XpdGGqVMTenFzEZevw9mC7TswzCkDtBivErt43yt6VKDx8ikGpiek5BCle5HilBFwOxrK+ZDTl9GNVAmMYtfw94CAAwxxrPgkw7TimfvHJ6DR7PFZDGP7M+32olMp4CNoapPxF9oO4tLdPIpsugC82fV+pf3McYtUHON9nm7ZqOWfPdQUnTS8JmKqZRHNJZ3U1qjsJS7fuVkQzNHsbbvEEXELAhckOMezE3+JUndT/CeWC+UnyoNOS3l2jVpuc4iDXQ== rsa-key-20200402

