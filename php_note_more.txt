变量：变量的本质就是内存中的一段空间，这段空间是有地址的。只能以下划线和字母保留字开头，而且不能为保留字，不能以数字开头，无法区分数字和变量。

变量作用域：1.全局变量：在函数外面
			2.局部变量：在函数里面，默认情况下，函数内部是不能访问函数外部变量的。
			  如果想在函数内部访问全局的变量则需要用$GLOBALS['var'];在函数内部写$GLOBALS['var'] = 10;就相当于在函数外部声明了$var = 10;
			  此时$var以然是全局变量了。
			  $GLOBALS是个数组，包换所有全局变量的值。
			  另外，global关键字的使用 -- 可以将变量地址引入函数内部
			  <?php 
					$num = 10;
					function show(){ 
						echo $num; //报错，未定义变量$num
						global $num ;//将全局变量$num的地址引入到函数内部，因为默认情况下函数内部不能使用全局变量$num
						echo $num; //10
						$num = 100;
					}
					show();
					echo $num; //100
			  ?>
				
			3.超全局变量：可以在函数内部和函数外部访问。如$_COOKIES,$_GET,$_POST
			注意：常量没有作用域的概念。
			
			总结：如何在函数内部访问函数外部变量（或者说全局变量）？
				1.使用超全局变量；
				2.使用$GLOBALS全局变量数组；
				3.使用global关键字，将全局变量的地址引入函数内部；
				4.use将函数外部变量引入到函数内部中。（前提是匿名函数，且只引入外面一层，函数包含的函数也算一层）
			
			

可变变量：$a = 'tom'; $b = 'a'; $$b 为 'tom' ,$$b可以理解为$($b == 'a')即$a, 作用：随机几率的功能。

销毁变量：unset销毁的是变量名，变量值由php垃圾回收机制销毁。可通过&地址传值引证。垃圾：没有变量指向（引用）的值就是"垃圾"。

常量：1.define('NAME', 'tom');     //定义常量
	    define('NAME', 'tom',true);//定义常量，不区分大小写
		或者：const NAME = 'tom';
		总结：define和const的区别？
		- 使用const使得代码简单易读，const本身就是一个语言结构，而define是一个函数。另外const在编译时要比define快很多。
		- const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。
		- Const可在类中使用，define不能
		- Const不能在条件语句中定义常量
		
      2.使用特殊字符当常量名，调用时要用constant
		define('%-%','abc'); echo constant('%-%');
		
	  3.常量一经定义 不能在次定义，建议定义前先判断:if(!defined('NAME'));

魔术常量：会“变化”的常量,会随着代码位置的改变而改变，有七个。__LINE__、__CLASS__、__FILE__、__DIR__、FUNCTION__、__METHOD__、__NAMESPACE__;

字符串：字符串定界符<<< ,如:<<<lizi asdasdadasdasd  lizi; 会输出asdasdadasdasd，以lizi开始和结束。
		<<<lizi $var lizi;能解析变量(heredoc 双引号)。
		<<<'lizi' lizi;不能解析变量(nowdoc 单引号)。
		可以直接在html网页上php代码中使用定界符嵌入js
		<?php
			echo <<<str                  //必须放在首行
				<script>  ... </script>; //将这段js代码当作字符串处理
			str;
		?>

数组：本质为变量，在内存中的一段连续的空间。目的是保存同一类型的多个值。
    1.分为索引数组和关联数组两种。索引数组下标指定数字，后面的自动加1，相同数字下标，后面的值覆盖前面的。
	  $array[true] = 'tom'; //下标为1
	  $array[false] = 'aymi';//下标为0
	  $array[12.9] = 'aymi';//下标为12
	  $array[-12.9] = 'aymi';//下标为-12
	  $array[-12] = 'aymi';//下标为-12
	  $array['12'] = 'aymi';//下标为整数12
	  $array[''] = 'aymi';//下标为空字符串,空字串也可以作为下标
	  $array[null] = 'aymi';//下标为空字符串,空字串也可以作为下标
	  
    2.在php版本7.1及以上支持数组赋值。如下面两个值交换
	  $num1 = 10; $num2 = 20;
	  [$num1,$num2] = [$num2,$num1];
	  //交换位置
	  $array = ['aa','bb','cc','dd','ee'];
	  for($i=0,$j=(count($array)-1); $i<=$j; $i++,$j--){
	//	[$array[$i],$array[$j]] = [$array[$j],$array[$i]]; 
		$temp = $array[$i];
		$array[$i] = $array[$j];
		$array[$j] = $temp;
	  }
	  
    3.字符串可以通过数组的方式去调用,'abc'[0]为 a ，'abc'[-1]为 c 从右边去第一个.
	
类型转换：和布尔之间的转换：
		1.数字：0为false，非0为true；
		2.字符串和数组：一个字符如果能转成0或空则为false，否则为true，'null','0.0','false'为true，'0'为false。即0和空为false，其他为true。
		总的：0、空为false，非0非空为true。
	  
中断循环：break、continue默认中断、跳过1重循环。如果要中断、跳过多重循环，则在后面增加一个数字，如break 2；//中断2重循环
	for(...){
			switch($int){
			case 5: break 2;//中断最外层的for循环，switch本质是循环一次的循环。
		}
	  
	}
	
函数：一段代码块。目的是实现模块化编程。

可变函数：将函数名存储到变量中。目的是优美化编程！?
		如：function showImg(){ ... }
			$fun = 'showImg';
			$fun();
			
匿名函数：就是没有名字的函数。
		如：$fun = function(){ ... }; //后面要加逗号，当作声明变量一样
			$fun();
		默认情况下，函数内部是不能访问函数外部变量的。但匿名函数使用use可以将外部变量引入匿名函数中，且只引入外面一层，即函数包含的函数也算一层
		如：<?php
				$num = 10;
				$fun = function() use(num){
					echo $num; 
				};
				$fun(); //10
			?>
	        
函数传参：1.默认的是值传递。
		  2.地址传递需要加&。当地址传递的时候不能直接传值如10，因为只有变量才有地址。
		如：function show(&$args){ ... }
			$show(10);//会报错，地址传递不能直接传值。
	
函数参数：1.参数默认值：有默认的值要写后面；变量不可当默认值；然而常量可以当默认值。
		  2.参数个数：实参多于形参会报错；实参多余形参只取前面对应的。
		  3.php内置函数取个数与值：func_num_args 获取参数的个数；func_get_args 获取参数以数组形式表现出来。
		  4.可变参数：...$var $var以数组形式表现出来,不传则为空数组，实参可传数组。如function show(...$var){}、function show($name,...$var){}
				实参时传输组将其展开：function show(...$var){ print_r(var) }
				$num = [10,20];
				show(num);// Array( [0]=>Array( [0]=>10,[1]=>20 ) ); //两个数组
				show(...num);// Array( [0]=>10,[1]=>20 );//利用可变参数将数组展开，只有一个数组
		  5.参数类型约束：PHP7以后支持强类型约束
				返回值必须是整型：function fun(int $num):int{ ... }
				返回值必须是数组：function fun(int $num):array{ ... }
				返回值必须是空,即不能有返回值：function fun(int $num):void{ ... } //PHP7.1以后支持
				可以约束的有：string、int、float、bool、array、void(PHP7.1以后支持)
	  
return: 1.终止当前脚本执行，如果有包含文件，包含文件的return只能终止其本身的执行，不能影响其他页面；
			如果想完全终止脚本（其他页面）的执行，则使用exit()或者die。
	  
	    2.返回页面结果。如test.php 中 <?php return ['name'=>'tom','age'=>20]; ?>
			<?php
				$info = require './test.php';  //使用test.php文件并赋值给info
				print_r($info); //Array([name]=>tom [age]=>20);
			?>
	    3.函数的返回和终止。
	  
静态变量：1.一般指的是静态局部变量，没有静态全局变量这个说法，要不就说全局变量。
		  2.静态变量只初始化一次（声明的同时要初始化），而普通变量每调用一次就初始化一次。
	  
静态变量和常量的区别：1.两者都是初始化一次。
					  2.常量不能改变值，静态变量可以改变值。
					  3.常量没有作用域，静态变量有作用域。
	  
递归：函数自己调用自己。两元素：递归点、递归出口。
		如：斐波那契数列 1 1 2 3 5 8 ...
		<?php
			function fbnq($n){  //打印第n个斐波那契数
				if($n==1 || $n==2)
					return 1;
				return fbnq($n-1) + fbnq($n-2);
			}
			//打印前十个斐波那契数列的值
			for($i=1; $<=10; $i++){
				echo fbnq($i).'&nbsp;';
			}
		?>
	  
包含文件方式：1.require  遇到错误抛出error级别错误，停止执行。包含多次。
				require_once 包含一次
			  2.include  遇到错误抛出warnning级别错误，继续执行。包含多次。
				include_once 包含一次
			  3.包含文件相当于 把包含文件的代码拷贝到主文件中，魔术常量除外，魔术常量获取的是所在文件的信息。
			  4.包含文件在编译时不执行，运行时加载到内存，独立编译包含文件。
			  5.require './head.html';  //在当前目录下找head.html
			  6.require 'head.html';    //受include_path影响，在include_path下从左到右依次查找，可通过set_include_path设置
			  
错误处理：error_reporting = E_ALL;  //报告所有错误
		  display_errors = on;      //将错误显示在浏览器上
		  log_errors = on;          //将错误记录在日志中
		  error_log = '地址';       //错误日志保存的地址
		  ini_set('error_reporting',E_ALL);//可通过ini_set修改php.ini配置文件，不需要重启
		  
文件夹操作：1.创建 	mkdir  如：mkdir('文件名',[权限如0777],[true|false(是否递归创建，默认false)]);  //默认不能递归创建
			2.删除  rmdir  如：rmdir('文件名') //不能递归删除，即只能删除空的文件夹
			3.重命名文件夹  rename 如：rename('旧名字','新名字');
			4.是否文件夹 is_dir  如：is_dir('文件夹名');
			5.打开文件夹 opendir 如：opendir('文件夹名'); //返回的是一个资源标识
			6.读取文件夹 readdir 如：readdir(文件夹标识); //需要传入打开文件夹时返回的标识
			7.关闭文件夹 closedir 如：closedir(文件夹标识);
			如：列出一个文件夹下的文件
				$folder = opendir('./');
				while($f = readdir($folder)){
					if($f == '.' || $f == '..') //文件夹下的第一个文件名和第二个文件名分别.和..，他们是隐藏的
						continue;
					echo iconv('gbk','utf-8',$f),'<br/>'; //gbk转成utf-8。中文系统下的文件名字需要转码，因为浏览器是utf-8编码。
				}
				closedir($folder);
				
			如：循环遍历一个文件夹下的所有文件
				function dirList($dir_path = '') {
					 if(is_dir($dir_path)) {
						 $dirs = opendir($dir_path);
						 if($dirs) {
							while(($file = readdir($dirs)) !== false) {
								 if($file !== '.' && $file !== '..') {
									 if(is_dir($file)) {
										 echo $dir_path . '/' . $file . '<br>';
										 dirList($dir_path . '/' . $file);
									 } else {
										 echo $dir_path . '/' . $file . '<br>';
									 }
								 }
							 }
							 closedir($dirs);
						 }
					 }else {
						 echo '该目录不存在！';
					  }
				}
					
				
	  
	  
	  
	  
	  