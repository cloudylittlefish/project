1.总结精练思考 形成自己的代码库
2.思考 换另一种方式实现 如mysql换成redis

正则表达式：参考--https://www.runoob.com/regexp/regexp-rule.html
	普通字符：普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。
		[...]: 匹配 [...] 中的所有字符，例如 [aeiou] 匹配字符串 "google runoob taobao" 中所有的 e o u a 字母。
		[^...] 匹配除了 [...] 中字符的所有字符，例如 [^aeiou] 匹配字符串 "google runoob taobao" 中除了 e o u a 字母的所有字母。
		[A-Z]：[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。
		.: 匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。
		[\s\S]: 匹配所有。
		\s：是匹配所有空白符，包括换行。
		\S：非空白符，包括换行。
		\w: 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。
		\W：匹配非字母、数字、下划线。等价于 '[^A-Za-z0-9_]'。
		\d：匹配一个数字字符。等价于 [0-9]。
		\D：匹配一个非数字字符。等价于 [^0-9]。
		
	
	非打印字符: 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：
		\cx：匹配由x指明的控制字符。例如\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
		\f：匹配一个换页符。等价于 \x0c 和 \cL。
		\n：匹配一个换行符。等价于 \x0a 和 \cJ。
		\r：匹配一个回车符。等价于 \x0d 和 \cM。
		\s：匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
		\S：匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
		\t：匹配一个制表符。等价于 \x09 和 \cI。
		\v：匹配一个垂直制表符。等价于 \x0b 和 \cK。
		
	特殊字符：所谓特殊字符，就是一些有特殊含义的字符，简单的说就是表示任何字符串的意思。若要匹配特殊字符，必须首先使字符"转义"，即将反斜杠字符\ 放在它们前面。
		$：匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。
	    (pattern)：匹配 pattern 并获取这一匹配。标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。
		(?:pattern)：匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。
		(?=pattern)：正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。
		(?!pattern)：正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。
		(?<=pattern)：反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。
		(?<!pattern)：反向否定预查，与正向否定预查类似，只是方向相反。
		*：匹配前面的子表达式零次或多次。
		+：匹配前面的子表达式一次或多次。
		.：匹配除换行符 \n 之外的任何单字符。
		[：标记一个中括号表达式的开始。
		?：匹配前面的子表达式零次或一次，或指明一个非贪婪限定符/最小匹配。
		\：将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。
		^：匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。
		{：标记限定符表达式的开始。
		|：指明两项之间的一个选择。
		
	限定符：限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。
		*：匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
		+：匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
		?：匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
		{n}：n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
		{n,}：n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
		{n,m}：m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
		注：* 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。
			如：<h1>RUNOOB-菜鸟教程</h1>，/<.*>/ 会匹配整个字符串<h1>RUNOOB-菜鸟教程</h1>，/<.*?>/则只匹配<h1>。
			
	定界符：定位符使您能够将正则表达式固定到行首或行尾。用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。
		^：匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。
		$：匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。
		\b：匹配一个单词边界，即字与空格间的位置。
		\B：非单词边界匹配。
			\b 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。
			例如，表达式/ter\b/匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：
				  表达式/\Bapt/匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：
		注：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。
		
	修饰符：标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。标记不写在正则表达式里，标记位于表达式之外。如/pattern/flags
		i：ignore - 不区分大小写，将匹配设置为不区分大小写。
		g：global - 全局匹配，查找所有的匹配项。
		m：multi line - 多行匹配，使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。
		s：特殊字符圆点 . 中包含换行符 \n，默认情况下的圆点 . 是 匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n。
		
		如：/pattern/gi
		
	例子：^[a-zA-Z0-9_]+$         // 所有包含一个以上的字母、数字或下划线的字符串 
		  ^[1-9][0-9]*$           // 所有的正整数  
		  ^\-?[0-9]+$             // 所有的整数 
		  ^[-]?[0-9]+(\.[0-9]+)?$ // 所有的浮点数	
		  [^\"\']                 //除了双引号(")和单引号(')之外的所有字符
		  [0-9\.\-]               //匹配所有的数字，句号和减号
          ^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)+$	//匹配邮箱  ^[\w]+@[\w]+(\.[\w]+)+$
		  
		  $mode = '/\[url\S*\[\/url\S*\]/';
		  preg_grep($mode,$str) //匹配查找，返回一个数组；
		  preg_match($mode,$str,$return) //在字符串中查找匹配项，返回一个数组。
		  preg_replace($mode,$replacement,$str [,int limit 匹配多少次]) //查找和替换子字符串（类似str_replace）
		 


变量：变量的本质就是内存中的一段空间，这段空间是有地址的。只能以下划线和字母保留字开头，而且不能为保留字，不能以数字开头，无法区分数字和变量。

变量作用域：1.全局变量：在函数外面
			2.局部变量：在函数里面，默认情况下，函数内部是不能访问函数外部变量的。
			  如果想在函数内部访问全局的变量则需要用$GLOBALS['var'];在函数内部写$GLOBALS['var'] = 10;就相当于在函数外部声明了$var = 10;
			  此时$var以然是全局变量了。
			  $GLOBALS是个数组，包换所有全局变量的值。
			  另外，global关键字的使用 -- 可以将变量地址引入函数内部
			  <?php 
					$num = 10;
					function show(){ 
						echo $num; //报错，未定义变量$num
						global $num ;//将全局变量$num的地址引入到函数内部，因为默认情况下函数内部不能使用全局变量$num
						echo $num; //10
						$num = 100;
					}
					show();
					echo $num; //100
			  ?>
				
			3.超全局变量：可以在函数内部和函数外部访问。如$_COOKIES,$_GET,$_POST
			注意：常量没有作用域的概念。
			
			总结：如何在函数内部访问函数外部变量（或者说全局变量）？
				1.使用超全局变量；
				2.使用$GLOBALS全局变量数组；
				3.使用global关键字，将全局变量的地址引入函数内部；
				4.use将函数外部变量引入到函数内部中。（前提是匿名函数，且只引入外面一层，函数包含的函数也算一层）
			
			

可变变量：$a = 'tom'; $b = 'a'; $$b 为 'tom' ,$$b可以理解为$($b == 'a')即$a, 作用：随机几率的功能。

销毁变量：unset销毁的是变量名，变量值由php垃圾回收机制销毁。可通过&地址传值引证。垃圾：没有变量指向（引用）的值就是"垃圾"。

常量：1.define('NAME', 'tom');     //定义常量
	    define('NAME', 'tom',true);//定义常量，不区分大小写
		或者：const NAME = 'tom';
		总结：define和const的区别？
		- 使用const使得代码简单易读，const本身就是一个语言结构，而define是一个函数。另外const在编译时要比define快很多。
		- const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。
		- Const可在类中使用，define不能
		- Const不能在条件语句中定义常量
		
      2.使用特殊字符当常量名，调用时要用constant
		define('%-%','abc'); echo constant('%-%');
		
	  3.常量一经定义 不能在次定义，建议定义前先判断:if(!defined('NAME'));

魔术常量：会“变化”的常量,会随着代码位置的改变而改变，有七个。__LINE__、__CLASS__、__FILE__、__DIR__、FUNCTION__、__METHOD__、__NAMESPACE__;

字符串：字符串定界符<<< ,如:<<<lizi asdasdadasdasd  lizi; 会输出asdasdadasdasd，以lizi开始和结束。
		<<<lizi $var lizi;能解析变量(heredoc 双引号)。
		<<<'lizi' lizi;不能解析变量(nowdoc 单引号)。
		可以直接在html网页上php代码中使用定界符嵌入js
		<?php
			echo <<<str                  //必须放在首行
				<script>  ... </script>; //将这段js代码当作字符串处理
			str;
		?>

数组：本质为变量，在内存中的一段连续的空间。目的是保存同一类型的多个值。
    1.分为索引数组和关联数组两种。索引数组下标指定数字，后面的自动加1，相同数字下标，后面的值覆盖前面的。
	  $array[true] = 'tom'; //下标为1
	  $array[false] = 'aymi';//下标为0
	  $array[12.9] = 'aymi';//下标为12
	  $array[-12.9] = 'aymi';//下标为-12
	  $array[-12] = 'aymi';//下标为-12
	  $array['12'] = 'aymi';//下标为整数12
	  $array[''] = 'aymi';//下标为空字符串,空字串也可以作为下标
	  $array[null] = 'aymi';//下标为空字符串,空字串也可以作为下标
	  
    2.在php版本7.1及以上支持数组赋值。如下面两个值交换
	  $num1 = 10; $num2 = 20;
	  [$num1,$num2] = [$num2,$num1];
	  //交换位置
	  $array = ['aa','bb','cc','dd','ee'];
	  for($i=0,$j=(count($array)-1); $i<=$j; $i++,$j--){
	//	[$array[$i],$array[$j]] = [$array[$j],$array[$i]]; 
		$temp = $array[$i];
		$array[$i] = $array[$j];
		$array[$j] = $temp;
	  }
	  
    3.字符串可以通过数组的方式去调用,'abc'[0]为 a ，'abc'[-1]为 c 从右边去第一个.
	
类型转换：和布尔之间的转换：
		1.数字：0为false，非0为true；
		2.字符串和数组：一个字符如果能转成0或空则为false，否则为true，'null','0.0','false'为true，'0'为false。即0和空为false，其他为true。
		总的：0、空为false，非0非空为true。
	  
中断循环：break、continue默认中断、跳过1重循环。如果要中断、跳过多重循环，则在后面增加一个数字，如break 2；//中断2重循环
	for(...){
			switch($int){
			case 5: break 2;//中断最外层的for循环，switch本质是循环一次的循环。
		}
	  
	}
	
函数：一段代码块。目的是实现模块化编程。

可变函数：将函数名存储到变量中。目的是优美化编程！?
		如：function showImg(){ ... }
			$fun = 'showImg';
			$fun();
			
匿名函数：就是没有名字的函数。
		如：$fun = function(){ ... }; //后面要加逗号，当作声明变量一样
			$fun();
		默认情况下，函数内部是不能访问函数外部变量的。但匿名函数使用use可以将外部变量引入匿名函数中，且只引入外面一层，即函数包含的函数也算一层
		如：<?php
				$num = 10;
				$fun = function() use(num){
					echo $num; 
				};
				$fun(); //10
			?>
	        
函数传参：1.默认的是值传递。
		  2.地址传递需要加&。当地址传递的时候不能直接传值如10，因为只有变量才有地址。
		如：function show(&$args){ ... }
			$show(10);//会报错，地址传递不能直接传值。
	
函数参数：1.参数默认值：有默认的值要写后面；变量不可当默认值；然而常量可以当默认值。
		  2.参数个数：实参多于形参会报错；实参多余形参只取前面对应的。
		  3.php内置函数取个数与值：func_num_args 获取参数的个数；func_get_args 获取参数以数组形式表现出来。
		  4.可变参数：...$var $var以数组形式表现出来,不传则为空数组，实参可传数组。如function show(...$var){}、function show($name,...$var){}
				实参时传输组将其展开：function show(...$var){ print_r(var) }
				$num = [10,20];
				show(num);// Array( [0]=>Array( [0]=>10,[1]=>20 ) ); //两个数组
				show(...num);// Array( [0]=>10,[1]=>20 );//利用可变参数将数组展开，只有一个数组
		  5.参数类型约束：PHP7以后支持强类型约束
				返回值必须是整型：function fun(int $num):int{ ... }
				返回值必须是数组：function fun(int $num):array{ ... }
				返回值必须是空,即不能有返回值：function fun(int $num):void{ ... } //PHP7.1以后支持
				可以约束的有：string、int、float、bool、array、void(PHP7.1以后支持)
	  
return: 1.终止当前脚本执行，如果有包含文件，包含文件的return只能终止其本身的执行，不能影响其他页面；
			如果想完全终止脚本（其他页面）的执行，则使用exit()或者die。
	  
	    2.返回页面结果。如test.php 中 <?php return ['name'=>'tom','age'=>20]; ?>
			<?php
				$info = require './test.php';  //使用test.php文件并赋值给info
				print_r($info); //Array([name]=>tom [age]=>20);
			?>
	    3.函数的返回和终止。
	  
静态变量：1.一般指的是静态局部变量，没有静态全局变量这个说法，要不就说全局变量。
		  2.静态变量只初始化一次（声明的同时要初始化），而普通变量每调用一次就初始化一次。
	  
静态变量和常量的区别：1.两者都是初始化一次。
					  2.常量不能改变值，静态变量可以改变值。
					  3.常量没有作用域，静态变量有作用域。
	  
递归：函数自己调用自己。两元素：递归点、递归出口。
		如：斐波那契数列 1 1 2 3 5 8 ...
		<?php
			function fbnq($n){  //打印第n个斐波那契数
				if($n==1 || $n==2)
					return 1;
				return fbnq($n-1) + fbnq($n-2);
			}
			//打印前十个斐波那契数列的值
			for($i=1; $<=10; $i++){
				echo fbnq($i).'&nbsp;';
			}
		?>
	  
包含文件方式：1.require  遇到错误抛出error级别错误，停止执行。包含多次。
				require_once 包含一次
			  2.include  遇到错误抛出warnning级别错误，继续执行。包含多次。
				include_once 包含一次
			  3.包含文件相当于 把包含文件的代码拷贝到主文件中，魔术常量除外，魔术常量获取的是所在文件的信息。
			  4.包含文件在编译时不执行，运行时加载到内存，独立编译包含文件。
			  5.require './head.html';  //在当前目录下找head.html
			  6.require 'head.html';    //受include_path影响，在include_path下从左到右依次查找，可通过set_include_path设置
			  
错误处理：error_reporting = E_ALL;  //报告所有错误
		  display_errors = on;      //将错误显示在浏览器上
		  log_errors = on;          //将错误记录在日志中
		  error_log = '地址';       //错误日志保存的地址
		  ini_set('error_reporting',E_ALL);//可通过ini_set修改php.ini配置文件，不需要重启
		  
文件夹操作：1.创建 	mkdir  如：mkdir('文件名',[权限如0777],[true|false(是否递归创建，默认false)]);  //默认不能递归创建
			2.删除  rmdir  如：rmdir('文件名') //不能递归删除，即只能删除空的文件夹
			3.重命名文件夹  rename 如：rename('旧名字','新名字');
			4.是否文件夹 is_dir  如：is_dir('文件夹名');
			5.打开文件夹 opendir 如：opendir('文件夹名'); //返回的是一个资源标识
			6.读取文件夹 readdir 如：readdir(文件夹标识); //需要传入打开文件夹时返回的标识
			7.关闭文件夹 closedir 如：closedir(文件夹标识);
			如：列出一个文件夹下的文件
				$folder = opendir('./');
				while($f = readdir($folder)){
					if($f == '.' || $f == '..') //文件夹下的第一个文件名和第二个文件名分别.和..，他们是隐藏的
						continue;
					echo iconv('gbk','utf-8',$f),'<br/>'; //gbk转成utf-8。中文系统下的文件名字需要转码，因为浏览器是utf-8编码。
				}
				closedir($folder);
				注：我们操作系统是中文的 即是gbk gb2312 ，所以php程序在中文系统中拿到的资源是gbk编码的，
					然而浏览器多数是utf-8的，所以中文系统php程序拿到的gbk编码的东西在浏览器上是乱码
				
			如：循环遍历一个文件夹下的所有文件
				function dirList($dir_path = '') {
					 if(is_dir($dir_path)) {
						 $dirs = opendir($dir_path);
						 if($dirs) {
							while(($file = readdir($dirs)) !== false) {
								 if($file !== '.' && $file !== '..') {
									 if(is_dir($file)) {
										 echo $dir_path . '/' . $file . '<br>';
										 dirList($dir_path . '/' . $file);
									 } else {
										 echo $dir_path . '/' . $file . '<br>';
									 }
								 }
							 }
							 closedir($dirs);
						 }
					 }else {
						 echo '该目录不存在！';
					  }
				}
				
文件操作：1.将字符写入文件： file_put_contents	file_put_contents('文件名地址','字符串');
			小结：1.所有“写”操作都是清空重写。
				  2.在文本中换行是\r\n。\r:回车（光标移动到当前行的最前面）。\n：换行。文本中要\r\n才能换行
				  3.\r\n是特殊字符，必须放在双引号内。
				
		  2.读取文件到一个字符串：1.file_get_contents - 将整个文件读入一个字符串
					  2.readfile - 读取输出文件内容
					   注：echo file_get_contents('文件名地址') == readfile('文件名地址');
					   
		  3.打开文件并操作：fopen fopen('文件名地址','模式'); 如：$fp = fopen('./test.txt','w'); //打开文件返回文件指针（文件地址）。循环写时会返回当前地址
							r：读 read
							w：写（清空写,不存在则新建文件） write 
							a：追加 append
		  4.写入文件一行：fputs fputs(文件指针,字符串); 如：fputs($fp,'abc'); //循环写时会返回当前地址
		  
		  5.读取文件一行：fgets fgets(文件指针); 如：fgets($fp); //循环读时会返回当前地址
		  
		  6.关闭文件：fclose
		  
		  7.删除文件：unlink('地址'); //文件不存在则报错
		  小结：1.打开文件，返回文件指针（文件指针就是文件地址），资源类型。
				2.打开文件写、追加操作，如果文件不存在就会创建新的文件。
				
		  8.二进制读取：fread(文件指针,文件大小);
		  如：$path = './face.jpg'; //图片
			  $fp = fopen($path,'r');
			  header('content-type:image/jpeg'); //告知浏览器下面的代码通过jpg图片的方式解析（默认是以字符串形式解析，ie除外）
			  echo fread($fp,filesize($path));
		  
			普通读取：
				header('content-type:image/jpeg');
				echo file_get_contents('./face.jpg');  //file_get_contents也可以进行二进制读取
			
		  小结：1.文件的存储有两种：字符流和二进制流。二进制流的读取按文件大小来读的。
				2.文本流有明确的结束符。二进制流没有明确的结束符，通过文件大小来判断是否读取完毕。
				3.file_get_contents既可以进行文本流读取，也可以进行二进制读取。
				

文件/文件夹判断：1.是否是文件：is_file('地址');
				 2.是否是文件夹：is_dir('地址');
				 3.文件或文件夹是否存在：file_exists('地址');
				
表单enctype属性：默认情况下，表单传递的是字符流，不能传递二进制流。如果传递音乐、图片、视频这种二进制数据，则必须设置enctype="multipart/form-data"
				1.application/x-www-form-urlencoded (默认) ，字符流，带格式的文本数据，将数据整体打包成xml传递。
				2.multipart/form-data 复合的表单数据，既能传递字符流又能传递二进制流。文件上传必须设置此类型。文件属于二进制流。
				3.text/explain 无格式的文本数据，主要用户电子邮件。
				注：表单允许上传的最大值设置
				<form ...>
					<input type="hidden" name="MAX_FILE_SIZE" value='10'></input> //必须在表单最上面，MAX_FILE_SIZE固定写法，value为多少字节，此为10字节
				</form>
				
文件上传：$_FILES['文件名字']['error'] error为0则上传成功 error为4则上传失败
			如：if($_FILES['文件名']['error'] == 0){
					move_uploaded_file($_FILES['文件名']['tmp_name'],'文件新名字');
				}else{
					echo '上传有误错误码为:'.$_FILES['文件名']['error'];
				}
			
面向对象：
		1.对象传递的是地址。如：$stu1 = new Student; $stu2 = $stu1; // #1 == #1 两者的编号是一样的，地址传递
			$stu3 = new Student; 
			var_dump($stu3 == $stu1); //true 对象的结构和保存的值相同
			var_dump($stu3 === $stu1); //false 对象的结构和保存的值相同,但对象编号不一样
			var_dump($stu2 === $stu1); //true 完全一样

		private：私有，只能在自己类才能访问。
		protected：保护，声明的变量在整个传承链上都能访问。如A继承B，则A的对象在整个继承链上的东西都能访问，反过来不行（B的对象）。
		
		$this：当前对象的地址。如$a = new A; 当前对象是A，this的代表的是类A
		调用父类构造函数：parent::__construct()。
		继承：向上寻找，找到一个就返回。PHP不允许多重继承，单一继承。
		
		内存需要掌握的四个区：栈区、堆区、静态和常量区、代码区。函数保存在代码区，对象的属性保存在堆区，地址保存在栈区
		
		类和对象在内存中的分布：1.对象的本质是一个复杂的变量。
								2.类的本质是一个自定义的复杂的数据类型。
								3.栈区：运行速度快，体积小，保存基本类型。
								4.堆区：运行速度稍慢，体积大，保存复杂类型。
								5.实例化的过程就是分配内存空间的过程。
								6.对象保存在堆区，将堆区的地址保存在栈区。
								
								注：计算机默认的内存管理是先进后出的。
	三大特性：
		封装：用class类和访问修饰符来封装，public，protected，private。
		
		继承：子类可以使用父类的成员。成员属性和成员方法。
		
		多态：多种形态。分为两种：方法重写和方法重载。
			重写：1.子类的方法必须和父类的方法同名。
				  2.参数个数要一致。
				  3.子类的修饰符不能比父类更严格。如父类是public，子类不能是protected和private。
				  
				  注：私有属性可以继承但不能重写，其他则能被重写（只有一个值）。
						如果对象既能访问私有的，也能访问共有的（同一个值），私有的优先。
				  
			重载：有多个同名的函数，通过参数不同来区分。 //PHP不支持方法重载，但可以通过其他方法来模拟重载
			
		静态属性：static 
			语法：类名::属性名 // A::$name
			1.静态成员加载类的时候分配空间，程序执行完毕后销毁。
			2.静态成员在内存中就一份。new对象的时候不会再分配内存空间。
			3。有多个修饰符，没有顺序之分。
			
		静态延时绑定：当前类的静态属性绑定,new对象时的类的静态属性值。只有运行时才知道代表哪个类
			语法：static::属性名  //static::$name 
		
			小结：static有两个作用，一是代表静态的，一是代表类名（延时绑定）。
			
		最终的：final 
			1.final修饰的类和方法不能被重写 。//final class...  final public function()...
	  
		抽象的：abstract，只有声明而没有实现。如抽象方法public abstract function fun();
			注：1.一个类只要有一个抽象方法就是抽象类（而抽象类可以没有抽象方法），abstract class ...
				2.抽象类不允许实例化，即不允许new...
				3.一个类继承抽象类，必须全部重写抽象方法，不然不允许实例化。
	  
			作用：1.定义命名规范，让继承的类统一命名。
				  2.抽象类阻止该类实例化，因为如果一个类全部都是静态成员，那么实例化是没有意义的而且还会消耗资源。
	  
		类常量：const ，如const ADD; 7.1以后才支持访问修饰符 public const ADD;
			注：类常量和静态成员的区别：1.相同点：都是在加载类的时候分配空间。
										2.不同点：常量的值不可以修改，静态的值可以修改。
										
		小结：类有三大成员：属性、方法、常量。对象是由属性和方法组成（在堆里）。
				访问修饰符public、protected、private。
				方法修饰符static、final、abstract
		
		
		接口：interface
			1.如果一个类中所有的方法都是抽象方法，则可声明为接口。
			2.接口是一个特殊的抽象类，接口中只能有抽象方法和常量。
			3.接口中的方法只能是public，所以可以省略public修饰。
			4.通过implements关键字来实现接口。
			5.声明为接口后，不能使用abstract和final来修饰方法了。
			如：interface Iperson { const ADD='xx'; function fun(); }  class student implements Iperson{  ... }
			
			注：类不可以多重继承，但接口可以多重实现，多个同名的函数只需要实现一次。
				也可以继承的同时实现接口，不过必须先继承后实现，extends ... implements ... 
		
		匿名类：如：$stu = new class{ ... };
			注：如果类只调用一次，那么使用匿名类可以节省空间，因为实例化完毕后就回收了资源，并且可以像变量那样销毁unset($stu);
			
		方法绑定：将方法绑定到对象上，并调用。7.0支持
			目的：需要时则加载，节省空间
			语法：闭包->call(对象); 将闭包绑定到对象上，并调用。PHP中匿名函数称为闭包
			如：class Student{ }
				$fun = function() { ... };
				$stu = new Student();
				$fun->call($stu); //相当于把函数写到类中并调用
			
		自动加载类：当缺少类的时候自动调用。
			方法一：__autoload()。  //PHP7.2以后不支持了
				如：function __autoload($class_name) { require ...$class_name...}  
			
			方法二：spl_autoload_register()：注册给定的函数作为__autoload的实现。PHP5.1以后支持
				如1：function loadClass($class_name){ ... }
					 function loadClass2($class_name){ ... }
					 spl_autoload_register('loadClass');
					 spl_autoload_register('loadClass2');
					注：注册到队列中，先进先出，先注册的先调用
					
				如2：spl_autoload_register(function($class_name){
						...
					 });
					 
				如3：处理少部分不规则的类命名
					 spl_autoload_register(
						function ($class){
							$map = [
								'Book'=>'aa/...',
								'Goods'=>'bb/...',
							];
							if(isset($map[$class])){
								require $map[$class];
							}
					 });
			
			
	创建对象的方式有两种：
		1.实例化。
		2.克隆。 如$stu1 = clone $stu2;//对象赋值是地址赋值，克隆传递赋值
			注：当执行clone的时候，会自动调用__clone()方法。
			
设计模式：
		单例：一个类只能有一个对象。三私一公
		class DB{
			private static $instance;  //不能让创建的变量销毁，而且普通变量也不行，因为只能静态调用函数，所以没有对象，也就没法使用$this->
			
			private function __construct() {}  //阻止外部调用
			
			private function __clone() {}  //阻止外部克隆
			
			public function static getInstance(){
				if( !self::$instance instanceof self )  //instanceof判断是否属于某个类的，不属于就实例化
					self::$instance = new self();
				return self::$instance;
				
			}
		}
			
			
			
			
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	  
	  